enum loginType {
  email
  phoneNo
}

extend type Account {
  legacyUsername: String
  type: loginType
}

enum UserRoleEnum {
  artist
  client
}

extend input CreateUserInput {
  username: String = "insecure"
  legacyUsername: String
  type: loginType
  phoneVerified: Boolean = false
  userRole: UserRoleEnum!
}

input UserProfileInput {
  firstName: String
  lastName: String
}

input VerifyUserOtpInput {
  userId: ID!

  otp: Int!
}

type CreateUserResult {
  type: loginType
  shopId: String
}

type newUserResult {
  userId: ID
  type: loginType
  loginResult: LoginResult
}

type resetPasswordResult {
  userId: ID
  success: Boolean
}

input LoginUserInput {
  email: String
  password: String!
  username: String
}

input ResetpasswordInput {
  type: loginType!
  emailPhone: String!
}

input resetPasswordOtpVerifyInput {
  otp: Int!
  userId: ID!
  password: String!
}

extend type Mutation {
  # checkUserExist(phone: String, email: String): Boolean
  # sendOTP(phone: String, email: String): Boolean

  createUserWithOtp(
    user: CreateUserInput!
    profile: UserProfileInput!
  ): newUserResult
  verifyOTPSignUp(user: VerifyUserOtpInput!): LoginResult
  loginUser(user: LoginUserInput!): CreateUserResult
  resetPasswordOtp(user: ResetpasswordInput!): resetPasswordResult
  resetPasswordOtpVerify(user: resetPasswordOtpVerifyInput!): Boolean
  # verifyOTP(phone: String, otp: String): verifyOTPResponse

  loginUserWithOtp(phoneOrEmail: String!): String

  # authenticateWithOTP(
  #   serviceName: String!
  #   params: AuthenticateParamsInput!
  # ): LoginResult
}
